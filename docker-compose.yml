services:
  web: # Rails application
    image: timesynk-web:latest
    build:
      context: .
      target: web
      args:
        - RAILS_ENV=production
    env_file:
      - .env.production
    environment:
      RAILS_ENV: production
      RAILS_MASTER_KEY_FILE: /run/secrets/rails_master_key
    volumes:
      - storage:/rails/storage
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    restart: unless-stopped
    secrets:
      - rails_master_key
    depends_on:
      - postgres
    command: ./bin/rails server ${IGNORE_SEED:+--ignore-seed}

  postgres: # database
    image: postgres:17
    env_file:
      - .env.production
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: timesynk_production
    secrets:
      - postgres_user
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  scheduler: # cron jobs
    image: timesynk-web:latest
    build:
      context: .
      target: scheduler
      args:
        - RAILS_ENV=production
    env_file:
      - .env.production
    environment:
      RAILS_ENV: production
      RAILS_MASTER_KEY_FILE: /run/secrets/rails_master_key
    restart: unless-stopped
    secrets:
      - rails_master_key
    volumes:
      - ./config/cron/games-crontab:/rails/config/cron/games-crontab
    entrypoint: ["/rails/bin/docker-scheduler-entrypoint"]
    command: ["cron", "-f"]

volumes:
    storage:
      driver: local
      driver_opts:
        type: none
        device: ./.volumes/storage
        o: bind
    postgres_data:
      driver: local
      driver_opts:
        type: none
        device: ./.volumes/postgres_data
        o: bind

secrets:
  rails_master_key:
    file: config/credentials/production.key
  postgres_user:
    file: config/secrets/postgres_user.secret
  postgres_password:
    file: config/secrets/postgres_password.secret